configfile: "config/config.yaml"

WORKING_DIR = config["working_dir"]

SAMPLES = config["samples"]

SHORT_READS_DIR = config["short_reads_dir"]
LONG_READS_DIR = config["long_reads_dir"]
BASECALL_DIR = config["basecall_dir"]
BIN_DIR = config["bin_dir"]
CORRECT_DIR = config["correct_dir"]
ASSEMBLY_DIR = config["assembly_dir"]

REVERSE_READS = config["reverse_reads"]
FORWARD_READS = config["forward_reads"]


rule all:
    input:
        expand(f"{BASECALL_DIR}/{{sample}}/reads.fastq", sample=SAMPLES),
        expand(f"{ASSEMBLY_DIR}/{{sample}}/Flye/assembly.fasta", sample=SAMPLES),
        expand(f"{CORRECT_DIR}/{{sample}}/herro/reads.fasta", sample=SAMPLES),
       


#########################################################
################# Basecalling ###########################
#########################################################
if config['basecalling' == 'yes']:

    rule dorado_basecalling:
    message: "Basecalling with dorado"
    input:
        pod5 = f"{SHORT_READS_DIR}/{{sample}}/pod5/"
    output: 
        reads = f"{BASECALL_DIR}/{{sample}}/reads.fastq",

    shell: 
        """
        dorado basecaller sup {input.pod5} > {output.reads} --device cuda:0 --emit-fastq
        """ 

#########################################################
################# Nanoplot ##############################
#########################################################

rule nanoplot:
    message: "Generating graph with Nanoplot"
    input:
        reads = f"{BASECALL_DIR}/{{sample}}/reads.fastq",
    params:
        outdir = f"{BASECALL_DIR}/{{sample}}/report"
    shell:
        """
        mkdir -p {params.outdir}
        NanoPlot --fastq {input.reads} -o {params.outdir}
        """

#########################################################
################# Metagenomics Workflow #################
#########################################################

rule wf_metagenomics:
    message: "Running metagenomics workflow"
    input:
        raw_reads = f"{BASECALL_DIR}/{{sample}}/reads.fastq"
    output:
        U_IDS = f"{BIN_DIR}/{{sample}}/U_reads.IDS",
        U_reads = f"{BIN_DIR}/{{sample}}/U_reads.fastq"
    params:
        outdir = f"{BIN_DIR}/{{sample}}",
        pipeline = "epi2me-labs/wf-metagenomics"
    handover: True
    shell:
        """
        nextflow run {params.pipeline} --fastq {input.raw_reads} --classifier kraken2 --include_read_assignements True --out_dir {params.outdir}
        grep "^U" {params.outdir}/output/reads_assignments/reads_lineages.kraken2.assignments.tsv| awk '{{print $2}}d' > {output.U_IDS}
        seqtk subseq {input.raw_reads} {output.U_IDS} > {output.U_reads}
        """

#########################################################
################# Read Correction #######################
#########################################################

if config['correcting_long_reads'] == "dorado_correct":
    rule dorado_correct: 
        message: "Correcting reads based on HERRO algorithm"
        input:
            reads = f"{BIN_DIR}/{{sample}}/U_reads.fastq"
        output:
            corrected_reads =  f"{CORRECT_DIR}/{{sample}}/herro/reads.fasta",
        shell:
            """
            dorado correct {input.reads} > {output.corrected_reads}
            """

#########################################################
###################### NanoPlot #########################
#########################################################

    rule nanoplot_corrected:
        message: "Generating graph with Nanoplot"
        input:
            reads = f"{CORRECT_DIR}/{{sample}}/herro/reads.fasta"
        shell:
            """
            NanoPlot --fasta {input.reads} -o {CORRECT_DIR}/{{sample}}
            """


#########################################################
############# Assembly with Flye ########################
#########################################################

# if config["assembler"] == flye:
#     rule flye_assembly:
#         message: "Assembling corrected read with Flye"
#         input:
#             corrected_reads = f"{CORRECT_DIR}/{{sample}}/herro/reads.fasta"
#         params:
#             d = f"{ASSEMBLY_DIR}/{{sample}}/Flye",
#         shell:
#             """
#             flye --nano-corr {input.corrected_reads} -o {params.d}
#             """

# elif config["assembler"] == masurca:
#     rule masurca:
#         message: "Hybrid assembling read with Masurca"
#         input : 
#             forward_reads = f"{FO},
#             reverse_reads = f"{LONG_READS_DIR}/{{sample}}/reverse.fastq",
#             raw_reads = f"{BIN_DIR}/{{sample}}/U_reads.fastq"
#         params:
#             threads = config["threads"],

#         shell:
#             """
#             masurca -t {params.threads}  -i 
#             """


##########################################################
#################### Polishing with Racon ################
##########################################################

# rule racon:
#     message: "Polishing assembly with Racon"
#     input:
#         assembly = f"{ASSEMBLY_DIR}/{{sample}}/Flye/assembly.fasta",
#         reads: f""
#     output: 
#         polished_assembly = "something"
#     params:
#         mapping1 = "ll"